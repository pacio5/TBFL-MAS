server:
  set_up: "SETUP_STATE_SERVER_AGENT"
  train: "TRAIN_STATE_SERVER_AGENT"
  predict: "PREDICT_STATE_SERVER_AGENT"
  calculate_metrics: "CALCULATE_METRICS_STATE_SERVER_AGENT"
  store_metrics: "STORE_METRICS_STATE_SERVER_AGENT"
  control_agents_present: "CONTROL_AGENTS_PRESENT_SERVER_AGENT"
  receive: "RECEIVE_STATE_SERVER_AGENT"
  avg: "AVG_STATE_SERVER_AGENT"
  send: "SEND_STATE_SERVER_AGENT"

client_agent:
  set_up: "SETUP_STATE_CLIENT_AGENT"
  receive: "RECEIVE_STATE_CLIENT_AGENT"
  train: "TRAIN_STATE_CLIENT_AGENT"
  send: "SEND_STATE_CLIENT_AGENT"
  predict: "PREDICT_STATE_CLIENT_AGENT"
  calculate_metrics: "CALCULATE_METRICS_STATE_CLIENT_AGENT"
  store_metrics: "STORE_METRICS_STATE_CLIENT_AGENT"

default:
  algorithm: "ML"
  batch_size_testing: 300
  batch_size_training: 300
  dataset_testing:
    - "fashion-dataset"
    - "fashion-mnist_test.csv"
  dataset_training:
    - "fashion-dataset"
    - "fashion-mnist_train.csv"
  global_epochs: 3
  iid: 1
  jid_server: "server@localhost"
  learning_rate: 0.01
  local_epochs: 5
  new_entry_or_leave: "no changes"
  number_of_client_agents: 5
  number_of_classes_in_dataset: 10
  standard_deviation_for_noises: 0
  threshold: 0.7
  wait_until_threshold_is_reached: "no threshold"

options:
  algorithm: ["ML","FedAvg","FedSGD","FedPER"]
  batch_size_total: [100, 200, 300, 500, 1000, 2000, 3000, 5000]
  batch_size_per_class: [10, 20, 30, 50, 100, 200, 300, 500, 1000]
  iid: [0, 1]
  new_entry_or_leave: ["no changes","new entry", "leave"]
  wait_until_threshold_is_reached: ["no threshold", "acc", "f1", "pre", "rec"]


